---
import { getCollection, getEntry, render } from "astro:content";

export const prerender = true;

const { slug } = Astro.params;

/**
 * Logic to ensure that `entry` is valid before passing it to `render()`
 * This is to prevent the astro [RenderUndefinedEntryError] - https://docs.astro.build/en/reference/errors/render-undefined-entry-error/
 */
let Content;
if (slug) {
  try {
    const entry = await getEntry("dictionary", slug);
    if (entry) {
      const rendered = await render(entry);
      Content = rendered.Content;
    } else {
      throw new Error(`Entry not found for slug: ${slug}`);
    }
  } catch (error) {
    console.error(`Failed to render entry: ${error.message}`);
    return Astro.redirect('/404');
  }
} else {
  return Astro.redirect('/404');
}

export async function getStaticPaths() {
  const dictionary = await getCollection("dictionary");
  return dictionary.map(word => {
    return ({
      params: { slug: word.id }
    });
  });
}
---
<Content />